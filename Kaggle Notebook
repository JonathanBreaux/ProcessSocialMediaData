{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d2ed6cfb",
   "metadata": {
    "papermill": {
     "duration": 0.007161,
     "end_time": "2024-09-15T00:50:23.211530",
     "exception": false,
     "start_time": "2024-09-15T00:50:23.204369",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Clean and analyze social media usage data with Python"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "131ce855",
   "metadata": {
    "papermill": {
     "duration": 0.006128,
     "end_time": "2024-09-15T00:50:23.224287",
     "exception": false,
     "start_time": "2024-09-15T00:50:23.218159",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Overview\n",
    "This is a very simple entry-level project. The task is as follows:\n",
    "1. Use Python to analyze the performance of different types of social media posts based on categories.\n",
    "2. Clean and analyze the data.\n",
    "3. Visualize the data for stakeholders who want to optimize their social media strategy for reach and engagement.\n",
    "\n",
    "NB: The scenario describes collecting Tweets, but we will be generating random data for this theoretical project. A follow-up practical project will explore more advanced implementations, such as utilizing Twitter's API to scrape tweets with permission, rudimentary text sentiment analysis, Natural Language Processing model integration, more thorough data cleaning processes, and more robust error prevention functionality. This notebook will be edited to link to the follow-up project upon its completion and this line will be removed.\n",
    "\n",
    "### One\n",
    "Import libraries."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fa0b1d2c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T00:50:23.239974Z",
     "iopub.status.busy": "2024-09-15T00:50:23.238766Z",
     "iopub.status.idle": "2024-09-15T00:50:25.444258Z",
     "shell.execute_reply": "2024-09-15T00:50:25.443151Z"
    },
    "papermill": {
     "duration": 2.216338,
     "end_time": "2024-09-15T00:50:25.447073",
     "exception": false,
     "start_time": "2024-09-15T00:50:23.230735",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd # for creating a DataFrame\n",
    "import numpy as np # for use of its 'random' methods\n",
    "import matplotlib.pyplot as plt # for visualizations\n",
    "import seaborn as sns # for improved visualizations\n",
    "import random # for selecting from range"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e06b0367",
   "metadata": {
    "papermill": {
     "duration": 0.006349,
     "end_time": "2024-09-15T00:50:25.460127",
     "exception": false,
     "start_time": "2024-09-15T00:50:25.453778",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Two\n",
    "Simulate extracted dataset of social media post information.\n",
    "Initialize a Python data dictionary with fields for Date, Category, and Likes.\n",
    "Fill fields with random data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4597f565",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T00:50:25.476146Z",
     "iopub.status.busy": "2024-09-15T00:50:25.474813Z",
     "iopub.status.idle": "2024-09-15T00:50:26.617424Z",
     "shell.execute_reply": "2024-09-15T00:50:26.616378Z"
    },
    "papermill": {
     "duration": 1.15346,
     "end_time": "2024-09-15T00:50:26.620091",
     "exception": false,
     "start_time": "2024-09-15T00:50:25.466631",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Define number of entries\n",
    "entries = 50000\n",
    "\n",
    "# Define a list of categories to bin social media posts\n",
    "post_sentiments = ['Marketing', 'Politics', 'Health', 'Music', 'Family', 'Technology', 'News', 'Travel']\n",
    "\n",
    "# Define a range of dates to timestamp social media posts\n",
    "date_min = '2023-01-01'\n",
    "date_max = '2023-12-31'\n",
    "date_range = pd.date_range(date_min, date_max)\n",
    "\n",
    "# Initialize dictionary with random data\n",
    "post_data = {\n",
    "    'Date': np.random.choice(date_range, size=entries), \n",
    "    'Category': [np.random.choice(post_sentiments) for _ in range(entries)], \n",
    "    'Likes': np.random.randint(0,100000, size=entries)\n",
    "}\n",
    "\n",
    "# Load data into Pandas DataFrame\n",
    "df = pd.DataFrame(post_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da1f13df",
   "metadata": {
    "papermill": {
     "duration": 0.006582,
     "end_time": "2024-09-15T00:50:26.633338",
     "exception": false,
     "start_time": "2024-09-15T00:50:26.626756",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Three\n",
    "Check the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1f7f11e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T00:50:26.648625Z",
     "iopub.status.busy": "2024-09-15T00:50:26.648176Z",
     "iopub.status.idle": "2024-09-15T00:50:26.665389Z",
     "shell.execute_reply": "2024-09-15T00:50:26.664382Z"
    },
    "papermill": {
     "duration": 0.027786,
     "end_time": "2024-09-15T00:50:26.667978",
     "exception": false,
     "start_time": "2024-09-15T00:50:26.640192",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        Date   Category  Likes\n",
      "0 2023-09-12       News  78420\n",
      "1 2023-07-28      Music  32460\n",
      "2 2023-11-24  Marketing  96605\n",
      "3 2023-01-20      Music  28842\n",
      "4 2023-03-29   Politics  71381\n"
     ]
    }
   ],
   "source": [
    "print(df.head()) # to print the first few rows of the DataFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2f211210",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T00:50:26.683564Z",
     "iopub.status.busy": "2024-09-15T00:50:26.682706Z",
     "iopub.status.idle": "2024-09-15T00:50:26.714096Z",
     "shell.execute_reply": "2024-09-15T00:50:26.712984Z"
    },
    "papermill": {
     "duration": 0.04221,
     "end_time": "2024-09-15T00:50:26.716957",
     "exception": false,
     "start_time": "2024-09-15T00:50:26.674747",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 50000 entries, 0 to 49999\n",
      "Data columns (total 3 columns):\n",
      " #   Column    Non-Null Count  Dtype         \n",
      "---  ------    --------------  -----         \n",
      " 0   Date      50000 non-null  datetime64[ns]\n",
      " 1   Category  50000 non-null  object        \n",
      " 2   Likes     50000 non-null  int64         \n",
      "dtypes: datetime64[ns](1), int64(1), object(1)\n",
      "memory usage: 1.1+ MB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "print(df.info()) # to print information about the DataFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4d5fb02b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T00:50:26.732339Z",
     "iopub.status.busy": "2024-09-15T00:50:26.731912Z",
     "iopub.status.idle": "2024-09-15T00:50:26.759422Z",
     "shell.execute_reply": "2024-09-15T00:50:26.758160Z"
    },
    "papermill": {
     "duration": 0.038459,
     "end_time": "2024-09-15T00:50:26.762189",
     "exception": false,
     "start_time": "2024-09-15T00:50:26.723730",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                             Date         Likes\n",
      "count                       50000  50000.000000\n",
      "mean   2023-07-02 00:26:59.136000  50094.669180\n",
      "min           2023-01-01 00:00:00      3.000000\n",
      "25%           2023-04-02 00:00:00  25116.500000\n",
      "50%           2023-07-02 00:00:00  50085.000000\n",
      "75%           2023-09-30 00:00:00  75050.250000\n",
      "max           2023-12-31 00:00:00  99996.000000\n",
      "std                           NaN  28857.112279\n"
     ]
    }
   ],
   "source": [
    "print(df.describe()) # to generate descriptive statistics from the DataFrame"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f085be3e",
   "metadata": {
    "papermill": {
     "duration": 0.006539,
     "end_time": "2024-09-15T00:50:26.775877",
     "exception": false,
     "start_time": "2024-09-15T00:50:26.769338",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Get count data from the Category field to supplement descriptive statistics."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6fad7c6b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T00:50:26.791584Z",
     "iopub.status.busy": "2024-09-15T00:50:26.790798Z",
     "iopub.status.idle": "2024-09-15T00:50:26.811204Z",
     "shell.execute_reply": "2024-09-15T00:50:26.810124Z"
    },
    "papermill": {
     "duration": 0.031148,
     "end_time": "2024-09-15T00:50:26.813797",
     "exception": false,
     "start_time": "2024-09-15T00:50:26.782649",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Category\n",
      "News          6352\n",
      "Technology    6343\n",
      "Music         6293\n",
      "Travel        6233\n",
      "Marketing     6216\n",
      "Health        6201\n",
      "Politics      6195\n",
      "Family        6167\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "category_counts = df['Category'].value_counts()\n",
    "print(category_counts)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b057863",
   "metadata": {
    "papermill": {
     "duration": 0.006829,
     "end_time": "2024-09-15T00:50:26.827707",
     "exception": false,
     "start_time": "2024-09-15T00:50:26.820878",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Four\n",
    "Clean the data.\n",
    "<br>\n",
    "Since we generated this data and didn't collect it, not much is going to happen here. Regardless, we will pantomime the process for the sake of procedure."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1a597d3b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T00:50:26.843622Z",
     "iopub.status.busy": "2024-09-15T00:50:26.843168Z",
     "iopub.status.idle": "2024-09-15T00:50:26.900805Z",
     "shell.execute_reply": "2024-09-15T00:50:26.899618Z"
    },
    "papermill": {
     "duration": 0.068678,
     "end_time": "2024-09-15T00:50:26.903452",
     "exception": false,
     "start_time": "2024-09-15T00:50:26.834774",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DataFrame 'Date' datatype is: datetime64[ns]\n",
      "DataFrame 'Likes' datatype is: int64\n",
      "\n",
      "             Date    Category  Likes\n",
      "0     2023-09-12        News  78420\n",
      "1     2023-07-28       Music  32460\n",
      "2     2023-11-24   Marketing  96605\n",
      "3     2023-01-20       Music  28842\n",
      "4     2023-03-29    Politics  71381\n",
      "...          ...         ...    ...\n",
      "49995 2023-05-02   Marketing   2181\n",
      "49996 2023-02-05    Politics  98780\n",
      "49997 2023-06-17       Music  53098\n",
      "49998 2023-01-13      Travel  15233\n",
      "49999 2023-11-06  Technology  55557\n",
      "\n",
      "[49993 rows x 3 columns]\n"
     ]
    }
   ],
   "source": [
    "# Remove all null data using DataFrame drop method\n",
    "df = df.dropna(how='any',axis=0)\n",
    "\n",
    "# Remove duplicate data from the DataFrame\n",
    "df = df.drop_duplicates()\n",
    "\n",
    "# Convert DataFrame to datetime format using Pandas object by passing DataFrame Date field to Pandas conversion method\n",
    "df['Date'] = pd.to_datetime(df['Date'])\n",
    "\n",
    "# Check for success\n",
    "print(\"DataFrame 'Date' datatype is:\", df['Date'].dtype)\n",
    "\n",
    "# Convert dataframe Likes to integer\n",
    "df['Likes'] = df['Likes'].astype(int)\n",
    "\n",
    "# Check for success\n",
    "print(\"DataFrame 'Likes' datatype is:\", df['Likes'].dtype)\n",
    "print('\\n',df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "862f9d81",
   "metadata": {
    "papermill": {
     "duration": 0.00683,
     "end_time": "2024-09-15T00:50:26.917522",
     "exception": false,
     "start_time": "2024-09-15T00:50:26.910692",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Five\n",
    "Check the cleaned data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c4961130",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T00:50:26.933500Z",
     "iopub.status.busy": "2024-09-15T00:50:26.933071Z",
     "iopub.status.idle": "2024-09-15T00:50:26.968426Z",
     "shell.execute_reply": "2024-09-15T00:50:26.967148Z"
    },
    "papermill": {
     "duration": 0.046446,
     "end_time": "2024-09-15T00:50:26.971033",
     "exception": false,
     "start_time": "2024-09-15T00:50:26.924587",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        Date   Category  Likes\n",
      "0 2023-09-12       News  78420\n",
      "1 2023-07-28      Music  32460\n",
      "2 2023-11-24  Marketing  96605\n",
      "3 2023-01-20      Music  28842\n",
      "4 2023-03-29   Politics  71381 \n",
      "\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 49993 entries, 0 to 49999\n",
      "Data columns (total 3 columns):\n",
      " #   Column    Non-Null Count  Dtype         \n",
      "---  ------    --------------  -----         \n",
      " 0   Date      49993 non-null  datetime64[ns]\n",
      " 1   Category  49993 non-null  object        \n",
      " 2   Likes     49993 non-null  int64         \n",
      "dtypes: datetime64[ns](1), int64(1), object(1)\n",
      "memory usage: 1.5+ MB\n",
      "None \n",
      "\n",
      "                                Date         Likes\n",
      "count                          49993  49993.000000\n",
      "mean   2023-07-02 00:25:19.124677632  50094.673054\n",
      "min              2023-01-01 00:00:00      3.000000\n",
      "25%              2023-04-02 00:00:00  25120.000000\n",
      "50%              2023-07-02 00:00:00  50085.000000\n",
      "75%              2023-09-30 00:00:00  75049.000000\n",
      "max              2023-12-31 00:00:00  99996.000000\n",
      "std                              NaN  28856.125438\n"
     ]
    }
   ],
   "source": [
    "print(df.head(),'\\n')\n",
    "print(df.info(),'\\n')\n",
    "print(df.describe())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51c16c0c",
   "metadata": {
    "papermill": {
     "duration": 0.00701,
     "end_time": "2024-09-15T00:50:26.985739",
     "exception": false,
     "start_time": "2024-09-15T00:50:26.978729",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Six\n",
    "Visualize the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d4c14f54",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T00:50:27.002659Z",
     "iopub.status.busy": "2024-09-15T00:50:27.001696Z",
     "iopub.status.idle": "2024-09-15T00:50:27.466073Z",
     "shell.execute_reply": "2024-09-15T00:50:27.464984Z"
    },
    "papermill": {
     "duration": 0.475934,
     "end_time": "2024-09-15T00:50:27.468943",
     "exception": false,
     "start_time": "2024-09-15T00:50:26.993009",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAkgAAAHHCAYAAABEEKc/AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABHAklEQVR4nO3deVxUZf//8fcAsrgAogmSiGTmvltKmlnyk9RM0xaLzO3Wu4LMNOv2rtxaXCrX27K679TSsuxOK+8iSSzNTJPELTMtTVOBShGxlO36/dGD820OakADM8Dr+XicR57rXHPO51yjM+/OXGfGYYwxAgAAgMXL3QUAAAB4GgISAACADQEJAADAhoAEAABgQ0ACAACwISABAADYEJAAAABsCEgAAAA2BCQAAAAbAhJQBU2ZMkUOh6NcjtWjRw/16NHDWv/kk0/kcDj09ttvl8vxhw0bpkaNGpXLsUorOztbf/vb3xQWFiaHw6GxY8f+pf3Zz/nQoUNyOBx69tln/1qhQBVCQAIquCVLlsjhcFiLv7+/wsPDFRsbq/nz5+v06dMuOc6xY8c0ZcoUpaamumR/ruTJtRXH008/rSVLlujee+/Va6+9piFDhlywb6NGjXTjjTeWY3VA1eTj7gIAuMa0adMUFRWl3NxcpaWl6ZNPPtHYsWM1e/Zsvffee2rTpo3V97HHHtM//vGPEu3/2LFjmjp1qho1aqR27doV+3Fr164t0XFK42K1vfzyyyooKCjzGv6K5ORkdenSRZMnT3bJ/irCOQOejoAEVBK9e/dWp06drPWJEycqOTlZN954o2666Sbt3btXAQEBkiQfHx/5+JTtP/9ff/1V1atXl6+vb5ke589Uq1bNrccvjoyMDLVo0cJl+6sI5wx4Oj5iAyqx66+/Xo8//rh++OEHLVu2zGo/3xykpKQkdevWTcHBwapZs6aaNm2qf/7zn5J+nzd05ZVXSpKGDx9ufZy3ZMkSSb/PM2rVqpVSUlLUvXt3Va9e3XqsfQ5Sofz8fP3zn/9UWFiYatSooZtuuklHjhxx6tOoUSMNGzasyGP/uM8/q+18c5DOnDmj8ePHKyIiQn5+fmratKmeffZZGWOc+jkcDiUkJGj16tVq1aqV/Pz81LJlSyUmJp5/wG0yMjI0cuRIhYaGyt/fX23bttXSpUut7YXzsQ4ePKj//e9/Vu2HDh0q1v4vpDjzrowxGj16tHx9ffXOO+9Y7cuWLVPHjh0VEBCgkJAQDR48uMjzsn//fg0aNEhhYWHy9/dXgwYNNHjwYJ06deov1Q14Eq4gAZXckCFD9M9//lNr167VqFGjzttnz549uvHGG9WmTRtNmzZNfn5+OnDggDZt2iRJat68uaZNm6ZJkyZp9OjRuuaaayRJV199tbWPX375Rb1799bgwYN11113KTQ09KJ1PfXUU3I4HHrkkUeUkZGhuXPnKiYmRqmpqdaVruIoTm1/ZIzRTTfdpPXr12vkyJFq166dPvroI02YMEFHjx7VnDlznPp/9tlneuedd3TfffepVq1amj9/vgYNGqTDhw+rTp06F6zrt99+U48ePXTgwAElJCQoKipKK1eu1LBhw5SZmakHHnhAzZs312uvvaYHH3xQDRo00Pjx4yVJl1xySbHPvzTy8/M1YsQIvfnmm1q1apX69u0r6ffn5PHHH9dtt92mv/3tb/rpp5+0YMECde/eXdu3b1dwcLBycnIUGxurc+fO6f7771dYWJiOHj2qNWvWKDMzU0FBQWVaO1BuDIAKbfHixUaS+fLLLy/YJygoyLRv395anzx5svnjP/85c+YYSeann3664D6+/PJLI8ksXry4yLZrr73WSDKLFi0677Zrr73WWl+/fr2RZC699FKTlZVltb/11ltGkpk3b57VFhkZaYYOHfqn+7xYbUOHDjWRkZHW+urVq40k8+STTzr1u+WWW4zD4TAHDhyw2iQZX19fp7YdO3YYSWbBggVFjvVHc+fONZLMsmXLrLacnBwTHR1tatas6XTukZGRpm/fvhfdX0n62s/54MGDRpJ55plnTG5urrn99ttNQECA+eijj6w+hw4dMt7e3uapp55y2teuXbuMj4+P1b59+3YjyaxcubJY9QIVFR+xAVVAzZo1L3o3W3BwsCTp3XffLfXkXj8/Pw0fPrzY/e+++27VqlXLWr/llltUv359ffDBB6U6fnF98MEH8vb21pgxY5zax48fL2OMPvzwQ6f2mJgYNW7c2Fpv06aNAgMD9f333//pccLCwnTHHXdYbdWqVdOYMWOUnZ2tTz/91AVnUzI5OTm69dZbtWbNGn3wwQfq1auXte2dd95RQUGBbrvtNv3888/WEhYWpiZNmmj9+vWSZF0h+uijj/Trr7+W+zkA5YWABFQB2dnZTmHE7vbbb1fXrl31t7/9TaGhoRo8eLDeeuutEoWlSy+9tEQTsps0aeK07nA4dPnll//l+Td/5ocfflB4eHiR8WjevLm1/Y8aNmxYZB+1a9fWyZMn//Q4TZo0kZeX88vshY5THqZPn67Vq1fr7bffLjIvbP/+/TLGqEmTJrrkkkuclr179yojI0OSFBUVpXHjxunf//636tatq9jYWC1cuJD5R6h0mIMEVHI//vijTp06pcsvv/yCfQICArRhwwatX79e//vf/5SYmKg333xT119/vdauXStvb+8/PU5J5g0V14W+zDI/P79YNbnChY5jbBO6K4LY2FglJiZq1qxZ6tGjh/z9/a1tBQUFcjgc+vDDD897zjVr1rT+/Nxzz2nYsGF69913tXbtWo0ZM0bTp0/XF198oQYNGpTLuQBljStIQCX32muvSfr9zfFivLy81LNnT82ePVtff/21nnrqKSUnJ1sfrbj6m7f379/vtG6M0YEDB5zuvqpdu7YyMzOLPNZ+9aUktUVGRurYsWNFPnL85ptvrO2uEBkZqf379xe5Cufq45REly5dtHr1an3++ee69dZblZeXZ21r3LixjDGKiopSTExMkaVLly5O+2rdurUee+wxbdiwQRs3btTRo0e1aNGi8j4loMwQkIBKLDk5WU888YSioqIUFxd3wX4nTpwo0lb4hYvnzp2TJNWoUUOSzhtYSuPVV191Cilvv/22jh8/rt69e1ttjRs31hdffKGcnByrbc2aNUVuOy9JbX369FF+fr7+9a9/ObXPmTNHDofD6fh/RZ8+fZSWlqY333zTasvLy9OCBQtUs2ZNXXvttS45TknFxMRoxYoVSkxM1JAhQ6wAN3DgQHl7e2vq1KlFro4ZY/TLL79IkrKyspyClfR7WPLy8rL+rgCVAR+xAZXEhx9+qG+++UZ5eXlKT09XcnKykpKSFBkZqffee8/p4xS7adOmacOGDerbt68iIyOVkZGh559/Xg0aNFC3bt0k/R5WgoODtWjRItWqVUs1atRQ586dFRUVVap6Q0JC1K1bNw0fPlzp6emaO3euLr/8cqevIvjb3/6mt99+WzfccINuu+02fffdd1q2bJnTpOmS1tavXz9dd911evTRR3Xo0CG1bdtWa9eu1bvvvquxY8cW2XdpjR49Wi+++KKGDRumlJQUNWrUSG+//bY2bdqk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Rv7+/oqIiNCsWbPK4/QAAEAF5daAdObMGbVt21YLFy4ssu3XX3/VV199pccff1xfffWV3nnnHe3bt0833XSTU7+4uDjt2bNHSUlJWrNmjTZs2KDRo0db27OystSrVy9FRkYqJSVFzzzzjKZMmaKXXnqpzM8PAABUTG79LbbevXurd+/e590WFBSkpKQkp7Z//etfuuqqq3T48GE1bNhQe/fuVWJior788kt16tRJkrRgwQL16dNHzz77rMLDw7V8+XLl5OTolVdeka+vr1q2bKnU1FTNnj3bKUgBAAAUqlBzkE6dOiWHw6Hg4GBJ0ubNmxUcHGyFI0mKiYmRl5eXtmzZYvXp3r27fH19rT6xsbHat2+fTp48ed7jnDt3TllZWU4LAACoOipMQDp79qweeeQR3XHHHQoMDJQkpaWlqV69ek79fHx8FBISorS0NKtPaGioU5/C9cI+dtOnT1dQUJC1REREuPp0AACAB6sQASk3N1e33XabjDF64YUXyvx4EydO1KlTp6zlyJEjZX5MAADgOdw6B6k4CsPRDz/8oOTkZOvqkSSFhYUpIyPDqX9eXp5OnDihsLAwq096erpTn8L1wj52fn5+8vPzc+VpAACACsSjryAVhqP9+/fr448/Vp06dZy2R0dHKzMzUykpKVZbcnKyCgoK1LlzZ6vPhg0blJuba/VJSkpS06ZNVbt27fI5EQAAUKG4NSBlZ2crNTVVqampkqSDBw8qNTVVhw8fVm5urm655RZt27ZNy5cvV35+vtLS0pSWlqacnBxJUvPmzXXDDTdo1KhR2rp1qzZt2qSEhAQNHjxY4eHhkqQ777xTvr6+GjlypPbs2aM333xT8+bN07hx49x12gAAwMO59SO2bdu26brrrrPWC0PL0KFDNWXKFL333nuSpHbt2jk9bv369erRo4ckafny5UpISFDPnj3l5eWlQYMGaf78+VbfoKAgrV27VvHx8erYsaPq1q2rSZMmcYs/AAC4ILcGpB49esgYc8HtF9tWKCQkRK+//vpF+7Rp00YbN24scX0AAKBq8ug5SAAAAO5AQAIAALAhIAEAANgQkAAAAGwISAAAADYEJAAAABsCEgAAgA0BCQAAwIaABAAAYENAAgAAsCEgAQAA2BCQAAAAbAhIAAAANgQkAAAAGwISAACADQEJAADAhoAEAABgQ0ACAACwISABAADYEJAAAABsCEgAAAA2BCQAAAAbAhIAAIANAQkAAMCGgAQAAGBDQAIAALAhIAEAANgQkAAAAGwISAAAADYEJAAAABsCEgAAgA0BCQAAwIaABAAAYENAAgAAsCEgAQAA2BCQAAAAbAhIAAAANm4NSBs2bFC/fv0UHh4uh8Oh1atXO203xmjSpEmqX7++AgICFBMTo/379zv1OXHihOLi4hQYGKjg4GCNHDlS2dnZTn127typa665Rv7+/oqIiNCsWbPK+tQAAEAF5taAdObMGbVt21YLFy487/ZZs2Zp/vz5WrRokbZs2aIaNWooNjZWZ8+etfrExcVpz549SkpK0po1a7RhwwaNHj3a2p6VlaVevXopMjJSKSkpeuaZZzRlyhS99NJLZX5+AACgYvJx58F79+6t3r17n3ebMUZz587VY489pv79+0uSXn31VYWGhmr16tUaPHiw9u7dq8TERH355Zfq1KmTJGnBggXq06ePnn32WYWHh2v58uXKycnRK6+8Il9fX7Vs2VKpqamaPXu2U5ACAAAo5LFzkA4ePKi0tDTFxMRYbUFBQercubM2b94sSdq8ebOCg4OtcCRJMTEx8vLy0pYtW6w+3bt3l6+vr9UnNjZW+/bt08mTJ8vpbAAAQEXi1itIF5OWliZJCg0NdWoPDQ21tqWlpalevXpO2318fBQSEuLUJyoqqsg+CrfVrl27yLHPnTunc+fOWetZWVl/8WwAAEBF4rFXkNxp+vTpCgoKspaIiAh3lwQAAMqRxwaksLAwSVJ6erpTe3p6urUtLCxMGRkZTtvz8vJ04sQJpz7n28cfj2E3ceJEnTp1ylqOHDny108IAABUGB4bkKKiohQWFqZ169ZZbVlZWdqyZYuio6MlSdHR0crMzFRKSorVJzk5WQUFBercubPVZ8OGDcrNzbX6JCUlqWnTpuf9eE2S/Pz8FBgY6LQAAICqw60BKTs7W6mpqUpNTZX0+8Ts1NRUHT58WA6HQ2PHjtWTTz6p9957T7t27dLdd9+t8PBwDRgwQJLUvHlz3XDDDRo1apS2bt2qTZs2KSEhQYMHD1Z4eLgk6c4775Svr69GjhypPXv26M0339S8efM0btw4N501AADwdG6dpL1t2zZdd9111nphaBk6dKiWLFmihx9+WGfOnNHo0aOVmZmpbt26KTExUf7+/tZjli9froSEBPXs2VNeXl4aNGiQ5s+fb20PCgrS2rVrFR8fr44dO6pu3bqaNGkSt/gDAIALcmtA6tGjh4wxF9zucDg0bdo0TZs27YJ9QkJC9Prrr1/0OG3atNHGjRtLXScAAKhaPHYOEgAAgLsQkAAAAGwISAAAADYEJAAAABsCEgAAgA0BCQAAwIaABAAAYENAAgAAsCEgAQAA2BCQAAAAbAhIAAAANgQkAAAAGwISAACADQEJAADAhoAEAABgQ0ACAACwISABAADYEJAAAABsCEgAAAA2pQpI33//vavrAAAA8BilCkiXX365rrvuOi1btkxnz551dU0AAABuVaqA9NVXX6lNmzYaN26cwsLC9Pe//11bt251dW0AAABuUaqA1K5dO82bN0/Hjh3TK6+8ouPHj6tbt25q1aqVZs+erZ9++snVdQIAAJSbvzRJ28fHRwMHDtTKlSs1c+ZMHThwQA899JAiIiJ099136/jx466qEwAAoNz8pYC0bds23Xfffapfv75mz56thx56SN99952SkpJ07Ngx9e/f31V1AgAAlBuf0jxo9uzZWrx4sfbt26c+ffro1VdfVZ8+feTl9XveioqK0pIlS9SoUSNX1goAAFAuShWQXnjhBY0YMULDhg1T/fr1z9unXr16+s9//vOXigMAAHCHUgWk/fv3/2kfX19fDR06tDS7BwAAcKtSzUFavHixVq5cWaR95cqVWrp06V8uCgAAwJ1KFZCmT5+uunXrFmmvV6+enn766b9cFAAAgDuVKiAdPnxYUVFRRdojIyN1+PDhv1wUAACAO5UqINWrV087d+4s0r5jxw7VqVPnLxcFAADgTqUKSHfccYfGjBmj9evXKz8/X/n5+UpOTtYDDzygwYMHu7pGAACAclWqu9ieeOIJHTp0SD179pSPz++7KCgo0N13380cJAAAUOGVKiD5+vrqzTff1BNPPKEdO3YoICBArVu3VmRkpKvrAwAAKHelCkiFrrjiCl1xxRWuqgUAAMAjlCog5efna8mSJVq3bp0yMjJUUFDgtD05OdklxQEAALhDqQLSAw88oCVLlqhv375q1aqVHA6Hq+sCAABwm1IFpBUrVuitt95Snz59XF2Pk/z8fE2ZMkXLli1TWlqawsPDNWzYMD322GNWKDPGaPLkyXr55ZeVmZmprl276oUXXlCTJk2s/Zw4cUL333+/3n//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Tz8tSWrfvr12796tRYsWaejQoW6urvJ46623tHz5cr3++utq2bKlUlNTNXbsWIWHhzPOKBGuILlB3bp15e3tXeROoPT0dIWFhbmpKs+UkJCgNWvWaP369WrQoIHVHhYWppycHGVmZjr1/+MYhoWFnXeMC7ddrE9gYKACAgIq/XOVkpKijIwMdejQQT4+PvLx8dGnn36q+fPny8fHR6GhoYyzi9SvX18tWrRwamvevLkOHz4s6f/G6mJjEBYWpoyMDKfteXl5OnHihEuej8ow1hMmTLCuIrVu3VpDhgzRgw8+aF0hZZxdz5PGtDi1FBcByQ18fX3VsWNHrVu3zmorKCjQunXrFB0d7cbKPIcxRgkJCVq1apWSk5MVFRXltL1jx46qVq2a0xju27dPhw8ftsYwOjpau3btcvpHmZSUpMDAQOuNKjo62mkfhX0K91HZn6uePXtq165dSk1NtZZOnTopLi7O+jPj7Bpdu3Yt8lUV3377rSIjIyVJUVFRCgsLcxqDrKwsbdmyxWmsMzMzlZKSYvVJTk5WQUGBOnfubPXZsGGDcnNzrT5JSUlq2rSpateubfW52PNRkf3666/y8nJ+a/P29lZBQYEkxrkseNKYFqeWYivRlG64zIoVK4yfn59ZsmSJ+frrr83o0aNNcHCw051AVdm9995rgoKCzCeffGKOHz9uLb/++qvV55577jENGzY0ycnJZtu2bSY6OtpER0db2wtvP+/Vq5dJTU01iYmJ5pJLLjnv7ecTJkwwe/fuNQsXLjzv7edV6bn6411sxjDOrrJ161bj4+NjnnrqKbN//36zfPlyU716dbNs2TKrz4wZM0xwcLB59913zc6dO03//v3Pe6t0+/btzZYtW8xnn31mmjRp4nSrdGZmpgkNDTVDhgwxu3fvNitWrDDVq1cvcqu0j4+PefbZZ83evXvN5MmTK+zt53ZDhw41l156qXWb/zvvvGPq1q1rHn74YasP41xyp0+fNtu3bzfbt283kszs2bPN9u3bzQ8//GCM8awxLU4txUFAcqMFCxaYhg0bGl9fX3PVVVeZL774wt0leQxJ510WL15s9fntt9/MfffdZ2rXrm2qV69ubr75ZnP8+HGn/Rw6dMj07t3bBAQEmLp165rx48eb3Nxcpz7r16837dq1M76+vuayyy5zOkahqvRc2QMS4+w677//vmnVqpXx8/MzzZo1My+99JLT9oKCAvP444+b0NBQ4+fnZ3r27Gn27dvn1OeXX34xd9xxh6lZs6YJDAw0w4cPN6dPn3bqs2PHDtOtWzfj5+dnLr30UjNjxowitbz11lvmiiuuML6+vqZly5bmf//7n+tP2A2ysrLMAw88YBo2bGj8/f3NZZddZh599FGnW8cZ55Jbv379eV+Thw4daozxrDEtTi3F4TDmD18vCgAAAOYgAQAA2BGQAAAAbAhIAAAANgQkAAAAGwISAACADQEJAADAhoAEAABgQ0ACUCEcOnRIDodDqamp7i7F8s0336hLly7y9/dXu3btSrUPh8Oh1atXS/LMcwSqKgISgGIZNmyYHA6HZsyY4dS+evVqORwON1XlXpMnT1aNGjW0b9++Ir8PVWjYsGEaMGDABfdx/Phx9e7du4wqBFBaBCQAxebv76+ZM2fq5MmT7i7FZXJyckr92O+++07dunVTZGSk6tSpU6p9hIWFyc/Pr9Q1ACgbBCQAxRYTE6OwsDBNnz79gn2mTJlS5OOmuXPnqlGjRtZ64VWVp59+WqGhoQoODta0adOUl5enCRMmKCQkRA0aNNDixYuL7P+bb77R1VdfLX9/f7Vq1Uqffvqp0/bdu3erd+/eqlmzpkJDQzVkyBD9/PPP1vYePXooISFBY8eOVd26dRUbG3ve8ygoKNC0adPUoEED+fn5qV27dkpMTLS2OxwOpaSkaNq0aXI4HJoyZcpFRu7C/vgRm11+fr5GjBihZs2a6fDhw5Kkd999Vx06dJC/v78uu+wyTZ06VXl5eZIkY4ymTJmihg0bys/PT+Hh4RozZkyp6gKqOgISgGLz9vbW008/rQULFujHH3/8S/tKTk7WsWPHtGHDBs2ePVuTJ0/WjTfeqNq1a2vLli2655579Pe//73IcSZMmKDx48dr+/btio6OVr9+/fTLL79IkjIzM3X99derffv22rZtmxITE5Wenq7bbrvNaR9Lly6Vr6+vNm3apEWLFp23vnnz5um5557Ts88+q507dyo2NlY33XST9u/fL+n3j8Zatmyp8ePH6/jx43rooYf+0njYnTt3TrfeeqtSU1O1ceNGNWzYUBs3btTdd9+tBx54QF9//bVefPFFLVmyRE899ZQk6b///a/mzJmjF198Ufv379fq1avVunVrl9YFVBkl/nlbAFXS0KFDTf/+/Y0xxnTp0sWMGDHCGGPMqlWrzB9fSiZPnmzatm3r9Ng5c+aYyMhIp31FRkaa/Px8q61p06bmmmuusdbz8vJMjRo1zBtvvGGMMebgwYNGktOve+fm5poGDRqYmTNnGmOMeeKJJ0yvXr2cjn3kyBEjyfo172uvvda0b9/+T883PDzcPPXUU05tV155pbnvvvus9bZt25rJkydfdD9/HLfzkWRWrVpljPm/c9y4caPp2bOn6datm8nMzLT69uzZ0zz99NNOj3/ttddM/fr1jTHGPPfcc+aKK64wOTk5f3p+AC6OK0gASmzmzJlaunSp9u7dW+p9tGzZUl5e//cSFBoa6nS1w9vbW3Xq1FFGRobT46Kjo60/+/j4qFOnTlYdO3bs0Pr161WzZk1radasmaTf5wsV6tix40Vry8rK0rFjx9S1a1en9q5du/6lcy6uO+64Q2fOnNHatWsVFBRkte/YsUPTpk1zOr9Ro0bp+PHj+vXXX3Xrrbfqt99+02WXXaZRo0Zp1apV1sdvAEqGgASgxLp3767Y2FhNnDixyDYvLy8ZY5zacnNzi/SrVq2a07rD4ThvW0FBQbHrys7OVr9+/ZSamuq07N+/X927d7f61ahRo9j7dIc+ffpo586d2rx5s1N7dna2pk6d6nRuu3bt0v79++Xv76+IiAjt27dPzz//vAICAnTfffepe/fu5x1/ABfn4+4CAFRMM2bMULt27dS0aVOn9ksuuURpaWkyxli3/7vye32++OILK+zk5eUpJSVFCQkJkqQOHTrov//9rxo1aiQfn9K/vAUGBio8PFybNm3Stddea7Vv2rRJV1111V87gWK499571apVK91000363//+Z9XQoUMH7du3T5dffvkFHxsQEKB+/fqpX79+io+PV7NmzbRr1y516NChzOsGKhMCEoBSad26teLi4jR//nyn9h49euinn37SrFmzdMsttygxMVEffvihAgMDXXLchQsXqkmTJmrevLnmzJmjkydPasSIEZKk+Ph4vfzyy7rjjjv08MMPKyQkRAcOHNCKFSv073//W97e3sU+zoQJEzR58mQ1btxY7dq10+LFi5Wamqrly5eXuOZTp04VCYl16tRRRETEBR9z//33Kz8/XzfeeKM+/PBDdevWTZMmTdKNN96ohg0b6pZbbpGXl5d27Nih3bt368knn9SSJUuUn5+vzp07q3r16lq2bJkCAgIUGRlZ4pqBqo6P2ACU2rRp04p8BNa8eXM9//zzWrhwodq2bautW7e69A6vGTNmaMaMGWrbtq0+++wzvffee6pbt64kWVd98vPz1atXL7Vu3Vpjx45VcHCw03yn4hgzZozGjRun8ePHq3Xr1kpMTNR7772nJk2alLjmTz75RO3bt3dapk6d+qePGzt2rKZOnao+ffro888/V2xsrNasWaO1a9fqyiuvVJcuXTRnzhwrAAUHB+vll19W165d1aZNG3388cd6//33S/0dTUBV5jD2yQIAAABVHFeQAAAAbAhIAAAANgQkAAAAGwISAACADQEJAADAhoAEAABgQ0ACAACwISABAADYEJAAAABsCEgAAAA2BCQAAAAbAhIAAIDN/wfU43obPsWrfAAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a histogram showing the distribution of likes\n",
    "sns.histplot(df['Likes'])\n",
    "\n",
    "plt.title('Distribution of Likes')\n",
    "plt.xlabel('Number of Likes')\n",
    "plt.ylabel('Frequency')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "12226755",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T00:50:27.486614Z",
     "iopub.status.busy": "2024-09-15T00:50:27.486198Z",
     "iopub.status.idle": "2024-09-15T00:50:27.902408Z",
     "shell.execute_reply": "2024-09-15T00:50:27.901317Z"
    },
    "papermill": {
     "duration": 0.428526,
     "end_time": "2024-09-15T00:50:27.905405",
     "exception": false,
     "start_time": "2024-09-15T00:50:27.476879",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a boxplot displaying the number of likes by category\n",
    "sns.boxplot(x='Category', y='Likes', data=df)\n",
    "\n",
    "plt.title('Distribution of Likes Across Categories')\n",
    "plt.xlabel('Category')\n",
    "plt.ylabel('Number of Likes')\n",
    "plt.xticks(rotation=45)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dde78729",
   "metadata": {
    "papermill": {
     "duration": 0.008096,
     "end_time": "2024-09-15T00:50:27.922119",
     "exception": false,
     "start_time": "2024-09-15T00:50:27.914023",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Seven\n",
    "Provide additional statistics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "86e9936f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T00:50:27.942120Z",
     "iopub.status.busy": "2024-09-15T00:50:27.941066Z",
     "iopub.status.idle": "2024-09-15T00:50:27.960055Z",
     "shell.execute_reply": "2024-09-15T00:50:27.958657Z"
    },
    "papermill": {
     "duration": 0.031762,
     "end_time": "2024-09-15T00:50:27.962583",
     "exception": false,
     "start_time": "2024-09-15T00:50:27.930821",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean of 'Likes' category:  50094.67305422759 \n",
      "\n",
      "Category\n",
      "Family        50315.269586\n",
      "Health        50301.711082\n",
      "Marketing     49736.298745\n",
      "Music         50432.374285\n",
      "News          49954.380353\n",
      "Politics      49980.647239\n",
      "Technology    50265.432445\n",
      "Travel        49769.531932\n",
      "Name: Likes, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Print out the mean of the 'Likes' category\n",
    "mean_likes = df['Likes'].mean()\n",
    "print(\"Mean of 'Likes' category: \",mean_likes,'\\n')\n",
    "\n",
    "# Use DataFrame groupby method to print out the mean 'Likes' of each Category\n",
    "category_likes = df.groupby('Category')['Likes'].mean()\n",
    "print(category_likes)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9fbb737c",
   "metadata": {
    "papermill": {
     "duration": 0.008671,
     "end_time": "2024-09-15T00:50:27.979924",
     "exception": false,
     "start_time": "2024-09-15T00:50:27.971253",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Eight\n",
    "Summarize findings\n",
    "<br>\n",
    "What do you notice about the distribution of posts by category, or of likes by category?\n",
    "What correlations can be identified?\n",
    "\n",
    "The data generated for this project was unrealistically random. Summary analysis will be explored more thoroughly in follow-up project using real data pulled from an active social media environment."
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 30761,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8.328737,
   "end_time": "2024-09-15T00:50:28.610024",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-15T00:50:20.281287",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
